#define fn_print(s,a)		bn_print(s,a,8)
#define fn_rand(r)		bn_rand_range(r,BN254_N,8)
#define fn_copy(r,a)		bn_copy(r,a,8)
#define fn_set_word(r,a)	bn_set_word(r,a,8)
#define fn_set_zero(r)		bn_set_zero(r,8)
#define fn_is_zero(a)		bn_is_zero(a,8)
#define fn_add(r,a,b)		bn_mod_add(r,a,b,BN254_N,8)
#define fn_sub(r,a,b)		bn_mod_sub(r,a,b,BN254_N,8)
#define fn_neg(r,a)		bn_mod_neg(r,a,BN254_N,8)
#define fn_dbl(r,a)		fn_add(r,a,a)
#define fn_to_bytes(a,out)	bn_to_bytes(a,8,out)
#define fn_from_bytes(a,in)	bn_from_bytes(a,8,in)
#ifdef BN254_FN_USE_MONTGOMERY
# define fn_set_bn(r,a)		bn_mont_mod_mul(r,a,BN254_N_MONT_ONE_SQR,BN254_N,BN254_N_INV_NEG,8)
# define fn_set_one(r)		bn_copy(r,BN254_N_MONT_ONE,8)
# define fn_to_hex(a,s)		fn_get_bn(a,a); bn_to_hex(a,8,s)
# define fn_from_hex(r,s)	bn_from_hex(r,8,s); fn_set_bn(r,r)
# define fn_get_bn(a,r) 	bn_mont_get(r,a,BN254_N,BN254_N_INV_NEG,8)
# define fn_is_one(a)		(bn_cmp(a,BN254_N_MONT_ONE,8) == 0)
# define fn_mul(r,a,b)		bn_mont_mod_mul(r,a,b,BN254_N,BN254_N_INV_NEG,8)
# define fn_sqr(r,a)		bn_mont_mod_sqr(r,a,BN254_N,BN254_N_INV_NEG,8)
#else
# define fn_set_bn(r,a)		fn_copy(r,a)
# define fn_set_one(r)		bn_set_one(r,8)
# define fn_to_hex(a,s)		bn_to_hex(a,8,s)
# define fn_from_hex(r,s)	bn_from_hex(r,8,s)
# define fn_get_bn(a,r) 	fn_copy(r,a)
# define fn_is_one(a)		bn_is_one(a,8)
# define fn_mul(r,a,b)		bn_barrett_mod_mul(r,a,b,BN254_N,BN254_N_MU,8)
# define fn_sqr(r,a)		bn_barrett_mod_sqr(r,a,BN254_N,BN254_N_MU,8)
#endif

#define fp_print(s,a)		bn_print(s,a,8)
#define fp_copy(r,a)		bn_copy(r,a,8)
#define fp_set_zero(r)		bn_set_zero(r,8)
#define fp_rand			bn_rand_range(r,BN254_P,8)
#define fp_is_zero(a)		bn_is_zero(a,8)
#define fp_add(r,a,b)		bn_mod_add(r,a,b,BN254_P,8)
#define fp_sub(r,a,b)		bn_mod_sub(r,a,b,BN254_P,8)
#define fp_neg(r,a)		bn_mod_neg(r,a,BN254_P,8)
#define fp_dbl(r,a)		fp_add(r,a,a)
#define fp_to_bytes(a,out)	bn_to_bytes(a,8,out)
#define fp_from_bytes(a,in)	bn_from_bytes(a,8,in)
#ifdef BN254_FP_USE_MONTGOMERY
# define fp_set_bn(r,a)		bn_mont_mod_mul(r,a,BN254_P_MONT_ONE_SQR,BN254_P,BN254_P_INV_NEG,8)
# define fp_set_one(r)		bn_copy(r,BN254_P_MONT_ONE,8)
# define fp_from_hex(r,s)	bn_from_hex(r,8,s); fp_set_bn(r,r);
# define fp_get_bn(a,r) 	bn_mont_get(r,a,BN254_P,BN254_P_INV_NEG,8)
# define fp_is_one(a)		(bn_cmp(a,BN254_P_MONT_ONE,8) == 0)
# define fp_mul(r,a,b)		bn_mont_mod_mul(r,a,b,BN254_P,BN254_P_INV_NEG,8)
# define fp_sqr(r,a)		bn_mont_mod_sqr(r,a,BN254_P,BN254_P_INV_NEG,8)
#else
# define fp_set_bn(r,a)		fp_copy(r,a)
# define fp_set_one(r)		bn_set_one(r,8)
# define fp_from_hex(r,s)	bn_from_hex(r,8,s)
# define fp_get_bn(a,r) 	fp_copy(r,a)
# define fp_is_one(a)		bn_is_one(a,8)
# define fp_mul(r,a,b)		bn_barrett_mod_mul(r,a,b,BN254_P,BN254_P_MU,8)
# define fp_sqr(r,a)		bn_barrett_mod_sqr(r,a,BN254_P,BN254_P_MU,8)
#endif
